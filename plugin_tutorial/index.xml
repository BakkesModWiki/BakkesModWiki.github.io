<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BakkesMod Programming Wiki</title>
    <link>https://bakkesmodwiki.github.io/plugin_tutorial/</link>
    <description>Recent content on BakkesMod Programming Wiki</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://bakkesmodwiki.github.io/plugin_tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Setup your installs</title>
      <link>https://bakkesmodwiki.github.io/plugin_tutorial/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bakkesmodwiki.github.io/plugin_tutorial/getting_started/</guid>
      <description>&lt;p&gt;Trying to get into making plugins for the first time? There&amp;rsquo;s some super useful tools out there! These steps should get you started on the path towards development.&lt;/p&gt;&#xA;&lt;p&gt;Note these instructions are designed for &lt;strong&gt;Windows 10 (and presumably 11)&lt;/strong&gt;. Rocket League is Windows exclusive, so this is the easiest way to develop for it. If you really want to use linux, it will be harder but may still be possible&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Starting a plugin</title>
      <link>https://bakkesmodwiki.github.io/plugin_tutorial/starting_a_plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bakkesmodwiki.github.io/plugin_tutorial/starting_a_plugin/</guid>
      <description>&lt;p&gt;It will assume you&amp;rsquo;re using the template as linked in &lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;https://bakkesmodwiki.github.io/plugin_tutorial/getting_started&#34;&#xA;  &#xA;&gt;Setting Up&lt;/a&gt;. You can of course make a plugin without it, but it gives an easier basis to work off of. You can name it anything, but here we&amp;rsquo;ll be using a demo plugin named CoolPlugin&lt;/p&gt;&#xA;&lt;p&gt;The template has a lot of commented out code that is designed to help you learn how to use the syntax. We&amp;rsquo;ll uncomment some of this as we go along.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3. Plugin Variables</title>
      <link>https://bakkesmodwiki.github.io/plugin_tutorial/plugin_variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bakkesmodwiki.github.io/plugin_tutorial/plugin_variables/</guid>
      <description>&lt;p&gt;Next we will make your plugin alterable by a user. They might want to enable/disable the plugin, change how it acts, and pretty much infinite options. I&amp;rsquo;ll be using a fairly simple plugin I&amp;rsquo;ve made as an example. I&amp;rsquo;ll only be focusing on the settings, not the actual code that makes it work.&#xA;We&amp;rsquo;ll continue the CoolPlugin from &lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;https://bakkesmodwiki.github.io/plugin_tutorial/starting_a_plugin/&#34;&#xA;  &#xA;&gt;Starting a Plugin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;We give the users control with the Console Variables, CVars. They allow a user to set a variable&amp;rsquo;s value, and for our code to know when those values are changed. These can be used for string, int, bool, float, or color values. They also can persist across multiple sessions, so user settings are saved. If something being changed to the wrong value can break your plugin, don&amp;rsquo;t use a CVar. Any internal plugin logic that can do unintended things if modified should be stored and controlled with class variables declared in your .cpp or .h files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4. Plugin Interface</title>
      <link>https://bakkesmodwiki.github.io/plugin_tutorial/plugin_interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bakkesmodwiki.github.io/plugin_tutorial/plugin_interface/</guid>
      <description>&lt;p&gt;This will go over creating a user-friendly interface. There&amp;rsquo;s buttons, sliders, checkboxes, dropdowns, and all sorts of options. It also assumes you&amp;rsquo;re using the template, as the template automatically includes the ImGui GUI library we&amp;rsquo;ll be using. It also adds a file we&amp;rsquo;ll be editing&lt;/p&gt;&#xA;&lt;p&gt;Yet again we have the &lt;code&gt;CoolPlugin&lt;/code&gt; from &lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;https://bakkesmodwiki.github.io/plugin_tutorial/plugin-variables&#34;&#xA;  &#xA;&gt;Plugin Variables&lt;/a&gt; and we want to add a button to activate our cooler ball on top, a checkbox to enable cool, and a slider to choose the distance that the ball is placed from your car&lt;/p&gt;</description>
    </item>
    <item>
      <title>5. Third party dependencies</title>
      <link>https://bakkesmodwiki.github.io/plugin_tutorial/3rdparty_dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bakkesmodwiki.github.io/plugin_tutorial/3rdparty_dependencies/</guid>
      <description>&lt;p&gt;For all submitted plugins that are using other libraries. We require the use of vcpkg for installing and building these.&lt;/p&gt;&#xA;&lt;div class=&#34;gdoc-page__anchorwrap&#34;&gt;&#xA;    &lt;h2 id=&#34;why-should-i-bother&#34;&gt;&#xA;        Why should I bother?&#xA;        &lt;a data-clipboard-text=&#34;https://bakkesmodwiki.github.io/plugin_tutorial/3rdparty_dependencies/#why-should-i-bother&#34; class=&#34;gdoc-page__anchor gdoc-page__anchor--right clip&#34; title=&#34;Anchor to: Why should I bother?&#34; aria-label=&#34;Anchor to: Why should I bother?&#34; href=&#34;#why-should-i-bother&#34;&gt;&#xA;            &lt;svg class=&#34;gdoc-icon gdoc_link&#34;&gt;&lt;use xlink:href=&#34;#gdoc_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&#xA;        &lt;/a&gt;&#xA;    &lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;When submitting a plugin to bakkesplugins.com for review. The review process involves a human beeing reading every single line of the code you&amp;rsquo;ve submitted.&#xA;Since we don&amp;rsquo;t accept pinky promises on whether or not there&amp;rsquo;s any &amp;lsquo;surprises&amp;rsquo; in the library code you&amp;rsquo;ve attached. Every line of code submitted has to be verified.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Best Practices</title>
      <link>https://bakkesmodwiki.github.io/plugin_tutorial/best_practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bakkesmodwiki.github.io/plugin_tutorial/best_practices/</guid>
      <description>&lt;p&gt;These practices are super important to follow to make sure you don&amp;rsquo;t accidentally crash the game.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Nullchecking&lt;br&gt;&#xA;Any BakkesMod wrapper is a pointer under the hood, and that pointer could be null!&#xA;If you try and use a null wrapper, you&amp;rsquo;ll crash.&#xA;This is super simple, just make sure you nullcheck every time you obtain a new wrapper.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ServerWrapper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameWrapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetCurrentGameState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Just check if the server is null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// The server is null! Maybe you want to log here&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// LOG(&amp;#34;Null Server!&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Otherwise just return out of the function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Now you&amp;#39;re safe and the server is valid&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Don&amp;rsquo;t store wrappers&lt;br&gt;&#xA;As the game is played, the pointers underneath wrappers might become invalid or point to unexpected memory locations.&#xA;Imagine you stored a ServerWrapper for use later, but by the time you use it you&amp;rsquo;re in a new match.&lt;br&gt;&#xA;Solve this by obtaining wrappers as you use them.&lt;br&gt;&#xA;Wrappers are safe to pass to functions or lambdas for immediate use, but should never be stored as class variables.&lt;br&gt;&#xA;Also don&amp;rsquo;t pass them to any callbacks or timeouts where the wrappers will be used later in time&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
